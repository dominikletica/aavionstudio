<?php

declare(strict_types=1);

namespace App\Asset;

use App\Module\ModuleManifest;
use App\Module\ModuleRegistry;
use App\Theme\ThemeManifest;
use App\Theme\ThemeRegistry;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\Filesystem\Filesystem;

final class StylesheetImportsBuilder
{
    private const HEADER = '/* This file is generated by StylesheetImportsBuilder. Do not edit manually. */';

    public function __construct(
        private readonly ModuleRegistry $moduleRegistry,
        private readonly ThemeRegistry $themeRegistry,
        #[Autowire('%kernel.project_dir%')]
        private readonly string $projectDir,
    ) {
    }

    public function build(): void
    {
        $imports = array_merge(
            [self::HEADER],
            $this->collectCssImports($this->projectDir.'/assets/styles/base', './base')
        );

        // Include base theme assets first when available.
        $imports = array_merge($imports, $this->themeImports('base'));

        $activeTheme = $this->themeRegistry->active();
        if ($activeTheme !== null && $activeTheme->slug !== 'base') {
            $imports = array_merge($imports, $this->themeImports($activeTheme->slug));
        }

        $imports = array_merge($imports, $this->moduleImports());

        $content = implode(PHP_EOL, $imports).PHP_EOL;
        $targetPath = $this->projectDir.'/assets/styles/imports.css';

        if (is_file($targetPath) && $content === file_get_contents($targetPath)) {
            return;
        }

        $filesystem = new Filesystem();
        $filesystem->dumpFile($targetPath, $content);
    }

    /**
     * @return list<string>
     */
    private function themeImports(string $slug): array
    {
        $manifest = $this->themeRegistry->find($slug);
        if ($manifest === null) {
            return [];
        }

        $themeRoot = $this->projectDir.'/assets/themes/'.$manifest->slug;
        $stylesDir = $themeRoot.'/styles';

        if (!is_dir($stylesDir)) {
            return [];
        }

        return $this->collectCssImports($stylesDir, '../themes/'.$manifest->slug.'/styles');
    }

    /**
     * @return list<string>
     */
    private function moduleImports(): array
    {
        /** @var list<ModuleManifest> $modules */
        $modules = array_filter(
            $this->moduleRegistry->all(),
            static fn (ModuleManifest $manifest): bool => $manifest->enabled,
        );

        usort(
            $modules,
            static fn (ModuleManifest $a, ModuleManifest $b): int => ($b->priority <=> $a->priority) ?: strcmp($a->slug, $b->slug),
        );

        $imports = [];
        foreach ($modules as $manifest) {
            $moduleRoot = $this->projectDir.'/assets/modules/'.$manifest->slug;
            $stylesDir = $moduleRoot.'/styles';

            if (!is_dir($stylesDir)) {
                continue;
            }

            $imports = array_merge(
                $imports,
                $this->collectCssImports($stylesDir, '../modules/'.$manifest->slug.'/styles')
            );
        }

        return $imports;
    }

    /**
     * @return list<string>
     */
    private function collectCssImports(string $directory, string $relativePrefix): array
    {
        $files = glob($directory.'/*.css') ?: [];
        if ($files === []) {
            return [];
        }

        natsort($files);

        $imports = [];
        foreach ($files as $file) {
            $basename = basename($file);
            $imports[] = sprintf('@import "%s/%s";', $relativePrefix, $basename);
        }

        return $imports;
    }
}

#!/usr/bin/env bash

set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$ROOT_DIR"

usage() {
  cat <<USAGE
Usage: $(basename "$0") <environment>

Supported environments: dev, test, prod
If omitted, the environment defaults to "dev".
USAGE
}

TARGET_ENV="${1:-dev}"
case "$TARGET_ENV" in
  dev)
    TARGET_DEBUG=1
    COMPOSER_FLAGS=(install --no-interaction --prefer-dist)
    ;;
  test)
    TARGET_DEBUG=1
    COMPOSER_FLAGS=(install --no-interaction --prefer-dist)
    ;;
  prod)
    TARGET_DEBUG=0
    COMPOSER_FLAGS=(install --no-interaction --prefer-dist --no-dev --optimize-autoloader --classmap-authoritative)
    ;;
  *)
    echo "[init] Unknown environment: $TARGET_ENV" >&2
    usage >&2
    exit 1
    ;;
esac

ENV_FILE=".env.local"
EXISTING_SECRET=""
EXISTING_PAYLOAD=""
DEFAULT_SECRET="DUMMY_SECRET_CHANGE_ME"
if [[ -f "$ENV_FILE" ]]; then
  EXISTING_SECRET="$(grep '^APP_SECRET=' "$ENV_FILE" | tail -n1 | cut -d'=' -f2- || true)"
  EXISTING_PAYLOAD="$(grep -vE '^(APP_ENV|APP_DEBUG|APP_SECRET)=' "$ENV_FILE" || true)"
fi

if [[ -n "${APP_SECRET:-}" ]]; then
  SECRET_VALUE="$APP_SECRET"
elif [[ "$TARGET_ENV" == "prod" ]]; then
  if [[ -z "$EXISTING_SECRET" || "$EXISTING_SECRET" == "$DEFAULT_SECRET" ]]; then
    SECRET_VALUE="$(php -r 'echo bin2hex(random_bytes(32));')"
  else
    SECRET_VALUE="$EXISTING_SECRET"
  fi
elif [[ -n "$EXISTING_SECRET" ]]; then
  SECRET_VALUE="$EXISTING_SECRET"
else
  SECRET_VALUE="$DEFAULT_SECRET"
fi

cat > "$ENV_FILE" <<ENV
# Generated by bin/init on $(date -u +"%Y-%m-%dT%H:%M:%SZ")
APP_ENV=$TARGET_ENV
APP_DEBUG=$TARGET_DEBUG
APP_SECRET=$SECRET_VALUE
ENV

if [[ -n "$EXISTING_PAYLOAD" ]]; then
  printf '\n%s\n' "$EXISTING_PAYLOAD" >> "$ENV_FILE"
fi

echo ">>> Wrote $ENV_FILE for APP_ENV=$TARGET_ENV"

echo ">>> Installing Composer dependencies"
APP_ENV="$TARGET_ENV" APP_DEBUG="$TARGET_DEBUG" composer "${COMPOSER_FLAGS[@]}"

ASSET_DIR="$ROOT_DIR/public/assets"
if [[ -d "$ASSET_DIR" ]]; then
  echo ">>> Clearing existing built assets"
  rm -rf "$ASSET_DIR"
fi
mkdir -p "$ASSET_DIR"

run_console() {
  local description="$1"
  shift
  echo ">>> $description"
  APP_ENV="$TARGET_ENV" APP_DEBUG="$TARGET_DEBUG" php bin/console "$@"
}

run_console "Rebuilding asset pipeline" app:assets:rebuild --force
# Fix: dbal throwing an error with --if-not-exists on SQLite, so we check for the DB file first
if [ ! -f var/system.brain ]; then
run_console "Creating SQLite database" doctrine:database:create
fi
run_console "Ensuring Messenger transports exist" messenger:setup-transports --no-interaction

echo ">>> Repository initialisation complete for $TARGET_ENV"
